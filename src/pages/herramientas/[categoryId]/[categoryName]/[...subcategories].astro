---
import SubCategoriesList from "@components/herramientas/SubCategoriesList.astro";
import Base from "@layouts/Base.astro";
import HeaderTools from '@components/herramientas/HeaderTools.astro'
import NavigationTools from "@components/herramientas/NavigationTools.astro";
import NotFoundTools from "@components/herramientas/NotFoundTools.astro";
const desoutterAPI = import.meta.env.PUBLIC_DESOUTTER_API || "https://7yc636gsjj.execute-api.us-east-1.amazonaws.com/prod";
const { categoryId, categoryName } = Astro.params;
// console.log(categoryId, categoryName);
const frontmatter = {
  title: categoryName + "| Desoutter Tools México",
  description: "Descubra el completo rango de herramientas industriales y soluciones personalizadas de Desoutter: herramientas de batería para ensamblaje, atornilladores eléctricos y herramientas neumáticas para fijación",
  keywords: ["Palabra Clave 1", "Palabra Clave 2", "Palabra Clave 3"],
  authorName: "Desumex",
  language: "es",
  canonicalUrl: Astro.url.href,
  facebookTitle: categoryName + "| Desoutter Tools México",
  facebookDescription: "Descubra el completo rango de herramientas industriales y soluciones personalizadas de Desoutter: herramientas de batería para ensamblaje, atornilladores eléctricos y herramientas neumáticas para fijación",
  facebookImage: "URL_de_la_Imagen_para_Facebook",
  facebookURL: Astro.url.href,
  twitterTitle: categoryName + "| Desoutter Tools México",
  twitterDescription: "Descubra el completo rango de herramientas industriales y soluciones personalizadas de Desoutter: herramientas de batería para ensamblaje, atornilladores eléctricos y herramientas neumáticas para fijación",
  twitterImage: "URL_de_la_Imagen_para_Twitter"
}

// Función para realizar la petición fetch por subcategoría
async function getSubcategories(categoryId:String|undefined, categoryName:String|undefined) {
  try {
    if(categoryName !== '[object Object]'){
      const response = await fetch(`${desoutterAPI}/herramientas/${categoryId}/${categoryName}`);
      if (!response.ok) {
        // Si la respuesta no es exitosa, lanzar un error con el status
        throw new Error(`HTTP error! Status: ${response.status}`);
      }

      return await response.json();
    }
  } catch (error) {
     // Afirmación de tipo para indicar que 'error' es de tipo 'Error'
  console.error('Error en la solicitud:', (error as Error).message);
  }
}

// Realiza la petición fetch y almacena los datos en el objeto organizado
const subcategories = await getSubcategories(categoryId, categoryName).catch((error)=>{
  console.log('No hay subcategoria en esta sección');
  console.error(error);
});

---
<Base frontmatter={frontmatter}>
  <NavigationTools />
    {subcategories !== undefined ? (
      <SubCategoriesList subcategories={subcategories} />
    ):
    (<div class="px-5">
      <HeaderTools tools={0} />
      <NotFoundTools />
    </div>)}
</Base>